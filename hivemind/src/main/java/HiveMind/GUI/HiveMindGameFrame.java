package HiveMind.GUI;

import HiveMind.HiveMindGame;
import HiveMind.CharacterParameters;
import HiveMind.CommandNames;
import HiveMind.ItemParameters;
import Adventure.Parser.Parser;
import Adventure.Parser.ParserOutput;
import Adventure.Type.GameItem;
import Adventure.Type.CommandType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;

public class HiveMindGameFrame extends javax.swing.JFrame {

    private HiveMindGame game;
    private final Parser parser = new Parser();
    private boolean saved = true;

    private boolean fast = false;

    private Timer tm;
    private StringBuilder s = new StringBuilder();
    private int counter = 0;
    private AudioInputStream ais;
    private Clip clip;

    private boolean music = true;

    public HiveMindGameFrame() {
        initComponents();
        init();

        ActionListener taskPerformer = (ActionEvent evt) -> {
            enableElements(false);
            counter++;
            if (counter >= s.length()) {
                counter = 0;
                tm.stop();
                enableElements(true);
            } else {
                StringBuilder supp = new StringBuilder();
                supp.append(s.toString().charAt(counter));
                GameTextArea.append(supp.toString());
                supp = new StringBuilder();
            }
        };
        int delay = 10;
        tm = new Timer(delay, taskPerformer);
        tm.start();
        playOverworldMusic();
    }

    private void playOverworldMusic() {
        try {
            File overworldTheme = new File("music/giygas.wav");

            ais = AudioSystem.getAudioInputStream(overworldTheme);
            clip = AudioSystem.getClip();
            clip.open(ais);
            startMusic();

        } catch (Exception exc) {
            JOptionPane.showMessageDialog(this, "Errore nella riproduzione della musica", "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void playBadEndingMusic() {
        try {
            File badEndingTheme = new File("music/white noiz.wav");

            clip.stop();
            ais = AudioSystem.getAudioInputStream(badEndingTheme);
            clip = AudioSystem.getClip();
            clip.open(ais);
            startMusic();

        } catch (Exception exc) {
            JOptionPane.showMessageDialog(this, "Errore nella riproduzione della musica", "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void playGoodEndingMusic() {
        try {
            File goodEndingTheme = new File("music/hurt.wav");

            clip.stop();
            ais = AudioSystem.getAudioInputStream(goodEndingTheme);
            clip = AudioSystem.getClip();
            clip.open(ais);
            startMusic();

        } catch (Exception exc) {
            JOptionPane.showMessageDialog(this, "Errore nella riproduzione della musica", "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void startMusic() {
        clip.start();
        clip.loop(Clip.LOOP_CONTINUOUSLY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        GameTextArea = new javax.swing.JTextArea();
        GameCommandField = new javax.swing.JTextField();
        EnterButton = new javax.swing.JButton();
        WestButton = new javax.swing.JButton();
        NorthButton = new javax.swing.JButton();
        SouthButton = new javax.swing.JButton();
        TitleLabel = new javax.swing.JLabel();
        LoadButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        InventoryTextArea = new javax.swing.JTextArea();
        InventoryLabel = new javax.swing.JLabel();
        CurrentRoomTitleLabel = new javax.swing.JLabel();
        CurrentRoomLabel = new javax.swing.JLabel();
        LookButton = new javax.swing.JButton();
        EastButton = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        LoadMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        ExitMenuItem = new javax.swing.JMenuItem();
        Options = new javax.swing.JMenu();
        FastText = new javax.swing.JCheckBoxMenuItem();
        Music = new javax.swing.JCheckBoxMenuItem();
        AboutMenu = new javax.swing.JMenu();
        AboutMenuItem = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        HelpMenu_HiveMindItem = new javax.swing.JMenuItem();
        HelpMenu_CommandsItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hive Mind ver.1.0.1");
        setIconImage((new ImageIcon("img/clone.gif")).getImage());
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setAutoscrolls(true);

        GameTextArea.setEditable(false);
        GameTextArea.setBackground(new java.awt.Color(0, 51, 102));
        GameTextArea.setColumns(20);
        GameTextArea.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        GameTextArea.setForeground(new java.awt.Color(255, 255, 255));
        GameTextArea.setRows(5);
        jScrollPane2.setViewportView(GameTextArea);

        GameCommandField.setToolTipText("Inserisci comando...");
        GameCommandField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                GameCommandFieldKeyReleased(evt);
            }
        });

        EnterButton.setBackground(new java.awt.Color(0, 51, 204));
        EnterButton.setForeground(new java.awt.Color(255, 255, 255));
        EnterButton.setText("INVIO");
        EnterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterButtonActionPerformed(evt);
            }
        });

        WestButton.setBackground(new java.awt.Color(0, 51, 204));
        WestButton.setForeground(new java.awt.Color(255, 255, 255));
        WestButton.setText("Ovest");
        WestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WestButtonActionPerformed(evt);
            }
        });

        NorthButton.setBackground(new java.awt.Color(0, 51, 204));
        NorthButton.setForeground(new java.awt.Color(255, 255, 255));
        NorthButton.setText("Nord");
        NorthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NorthButtonActionPerformed(evt);
            }
        });

        SouthButton.setBackground(new java.awt.Color(0, 51, 204));
        SouthButton.setForeground(new java.awt.Color(255, 255, 255));
        SouthButton.setText("Sud");
        SouthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SouthButtonActionPerformed(evt);
            }
        });

        TitleLabel.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        TitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        TitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabel.setText("HIVE MIND");

        LoadButton.setBackground(new java.awt.Color(0, 51, 204));
        LoadButton.setForeground(new java.awt.Color(255, 255, 255));
        LoadButton.setText("CARICA");
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });

        SaveButton.setBackground(new java.awt.Color(0, 51, 204));
        SaveButton.setForeground(new java.awt.Color(255, 255, 255));
        SaveButton.setText("SALVA");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        InventoryTextArea.setEditable(false);
        InventoryTextArea.setColumns(20);
        InventoryTextArea.setRows(5);
        jScrollPane3.setViewportView(InventoryTextArea);

        InventoryLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        InventoryLabel.setForeground(new java.awt.Color(255, 255, 255));
        InventoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        InventoryLabel.setText("--- Inventario ---");

        CurrentRoomTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        CurrentRoomTitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        CurrentRoomTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CurrentRoomTitleLabel.setText("Stanza corrente:");

        CurrentRoomLabel.setForeground(new java.awt.Color(255, 255, 255));
        CurrentRoomLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CurrentRoomLabel.setText("*DEFAULT*");

        LookButton.setBackground(new java.awt.Color(0, 51, 204));
        LookButton.setForeground(new java.awt.Color(255, 255, 255));
        LookButton.setText("OSSERVA");
        LookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LookButtonActionPerformed(evt);
            }
        });

        EastButton.setBackground(new java.awt.Color(0, 51, 204));
        EastButton.setForeground(new java.awt.Color(255, 255, 255));
        EastButton.setText("Est");
        EastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EastButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(GameCommandField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EnterButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(WestButton)
                                .addGap(14, 14, 14)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(SouthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NorthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CurrentRoomLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LookButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(LoadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(InventoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CurrentRoomTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(18, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LoadButton, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(SaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InventoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CurrentRoomTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(CurrentRoomLabel)
                        .addGap(31, 31, 31)
                        .addComponent(LookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NorthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(WestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SouthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GameCommandField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EnterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        GameCommandField.getAccessibleContext().setAccessibleName("");
        GameCommandField.getAccessibleContext().setAccessibleDescription(".");

        FileMenu.setText("File");

        NewMenuItem.setText("Nuova Partita");
        NewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(NewMenuItem);
        FileMenu.add(jSeparator2);

        LoadMenuItem.setText("Carica");
        LoadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(LoadMenuItem);

        SaveMenuItem.setText("Salva");
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(SaveMenuItem);
        FileMenu.add(jSeparator1);

        ExitMenuItem.setText("Esci");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(ExitMenuItem);

        MenuBar.add(FileMenu);

        Options.setText("Options");

        FastText.setText("Fast Text");
        FastText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FastTextActionPerformed(evt);
            }
        });
        Options.add(FastText);

        Music.setSelected(true);
        Music.setText("Music");
        Music.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MusicActionPerformed(evt);
            }
        });
        Options.add(Music);

        MenuBar.add(Options);

        AboutMenu.setText("About");

        AboutMenuItem.setText("About");
        AboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuItemActionPerformed(evt);
            }
        });
        AboutMenu.add(AboutMenuItem);

        MenuBar.add(AboutMenu);

        HelpMenu.setText("?");

        HelpMenu_HiveMindItem.setText("Hive Mind");
        HelpMenu_HiveMindItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpMenu_HiveMindItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpMenu_HiveMindItem);

        HelpMenu_CommandsItem.setText("Lista comandi");
        HelpMenu_CommandsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpMenu_CommandsItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpMenu_CommandsItem);

        MenuBar.add(HelpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EnterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterButtonActionPerformed
        sendCommand();
        checkEnd();
    }//GEN-LAST:event_EnterButtonActionPerformed

    private void WestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WestButtonActionPerformed
        ParserOutput p = parser.parse("ovest", game.getCommands(), game.getCurrentRoom().getItems(), game.getInventory(), game.getCurrentRoom().getNPCs());
        GameCommandField.setText("");
        tm.start();
        s = new StringBuilder("\n");
        GameTextArea.append("\n>> ovest\n");
        GameTextArea.setCaretPosition(0);
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
        if (fast) {
            GameTextArea.append(game.nextMove(p));
        } else {
            s.append(game.nextMove(p));
        }
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());

        CurrentRoomLabel.setText(game.getCurrentRoom().getName());
        updateInventory();
        saved = false;

        checkEnd();
    }//GEN-LAST:event_WestButtonActionPerformed

    private void EastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EastButtonActionPerformed
        ParserOutput p = parser.parse("est", game.getCommands(), game.getCurrentRoom().getItems(), game.getInventory(), game.getCurrentRoom().getNPCs());
        GameCommandField.setText("");
        tm.start();
        s = new StringBuilder("\n");
        GameTextArea.append("\n>> est\n");
        GameTextArea.setCaretPosition(0);
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
        if (fast) {
            GameTextArea.append(game.nextMove(p));
        } else {
            s.append(game.nextMove(p));
        }
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());

        CurrentRoomLabel.setText(game.getCurrentRoom().getName());
        updateInventory();
        saved = false;

        checkEnd();
    }//GEN-LAST:event_EastButtonActionPerformed

    private void NorthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NorthButtonActionPerformed
        ParserOutput p = parser.parse("nord", game.getCommands(), game.getCurrentRoom().getItems(), game.getInventory(), game.getCurrentRoom().getNPCs());
        GameCommandField.setText("");
        tm.start();
        s = new StringBuilder("\n");
        GameTextArea.append("\n>> nord\n");
        GameTextArea.setCaretPosition(0);
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
        if (fast) {
            GameTextArea.append(game.nextMove(p));
        } else {
            s.append(game.nextMove(p));
        }
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());

        CurrentRoomLabel.setText(game.getCurrentRoom().getName());
        updateInventory();
        saved = false;

        checkEnd();
    }//GEN-LAST:event_NorthButtonActionPerformed

    private void SouthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SouthButtonActionPerformed
        ParserOutput p = parser.parse("sud", game.getCommands(), game.getCurrentRoom().getItems(), game.getInventory(), game.getCurrentRoom().getNPCs());
        GameCommandField.setText("");
        tm.start();
        s = new StringBuilder("\n");
        GameTextArea.append("\n>> sud\n");
        GameTextArea.setCaretPosition(0);
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
        if (fast) {
            GameTextArea.append(game.nextMove(p));
        } else {
            s.append(game.nextMove(p));
        }
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());

        CurrentRoomLabel.setText(game.getCurrentRoom().getName());
        updateInventory();
        saved = false;

        checkEnd();
    }//GEN-LAST:event_SouthButtonActionPerformed

    private void LookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LookButtonActionPerformed
        ParserOutput p = parser.parse("osserva", game.getCommands(), game.getCurrentRoom().getItems(), game.getInventory(), game.getCurrentRoom().getNPCs());
        GameCommandField.setText("");
        tm.start();
        s = new StringBuilder("\n");
        GameTextArea.append("\n>> osserva\n");
        GameTextArea.setCaretPosition(0);
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
        if (fast) {
            GameTextArea.append(game.nextMove(p));
        } else {
            s.append(game.nextMove(p));
        }
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
        saved = false;

        checkEnd();
    }//GEN-LAST:event_LookButtonActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        saveFile();
        checkEnd();
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void NewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewMenuItemActionPerformed
        if (!saved && !game.isEnd()) {
            int option = JOptionPane.showConfirmDialog(null, "Ci sono modifiche non salvate. Sicuro di voler cominciare una nuova partita?", "Nuova partita", JOptionPane.YES_NO_CANCEL_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                init();
                saved = true;
            } else if (option == JOptionPane.NO_OPTION) {
                saveFile();
            } else if (option == JOptionPane.CANCEL_OPTION) {
                return;
            }
        } else {
            init();
            saved = true;
        }
    }//GEN-LAST:event_NewMenuItemActionPerformed

    private void GameCommandFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GameCommandFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            sendCommand();
        }
    }//GEN-LAST:event_GameCommandFieldKeyReleased

    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed
        if (!saved && !game.isEnd()) {
            int option = JOptionPane.showConfirmDialog(null, "Ci sono modifiche non salvate. Sicuro di voler caricare una nuova partita?", "Caricamento file", JOptionPane.YES_NO_CANCEL_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                loadFile();
                saved = true;
            } else if (option == JOptionPane.NO_OPTION) {
                saveFile();
            } else if (option == JOptionPane.CANCEL_OPTION) {
                return;
            }
        } else {
            loadFile();
            saved = true;
        }
    }//GEN-LAST:event_LoadButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        saveFile();
        checkEnd();
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void LoadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadMenuItemActionPerformed
        if (!saved && !game.isEnd()) {
            int option = JOptionPane.showConfirmDialog(null, "Ci sono modifiche non salvate. Sicuro di voler caricare una nuova partita?", "Caricamento file", JOptionPane.YES_NO_CANCEL_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                loadFile();
                saved = true;
            } else if (option == JOptionPane.NO_OPTION) {
                saveFile();
            } else if (option == JOptionPane.CANCEL_OPTION) {
                return;
            }
        } else {
            loadFile();
            saved = true;
        }
    }//GEN-LAST:event_LoadMenuItemActionPerformed

    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        if (!saved && !game.isEnd()) {
            int option = JOptionPane.showConfirmDialog(null, "Ci sono modifiche non salvate. Sicuro di voler chiudere il gioco?", "Chiusura gioco", JOptionPane.YES_NO_CANCEL_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                System.exit(0);
            } else if (option == JOptionPane.NO_OPTION) {
                saveFile();
            } else if (option == JOptionPane.CANCEL_OPTION) {
                return;
            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_ExitMenuItemActionPerformed

    private void AboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "- Hive Mind - Ver. 1.0.1\n"
                + "Autori: Gliaccendinisgasati (Giuseppe Preziuso, Gianluca Sonnante)\n"
                + "Grazie per aver giocato!", "Hive Mind - About", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("img/clone.gif"));
    }//GEN-LAST:event_AboutMenuItemActionPerformed

    private void HelpMenu_HiveMindItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpMenu_HiveMindItemActionPerformed
        JOptionPane.showMessageDialog(this, "Hive Mind e' un gioco d'avventura testuale, nel quale puoi\n"
                + "inserire dei comandi testuali per esplorare l'ambiente che ti viene descritto e\n"
                + "risolvere enigmi che ti verranno posti davanti, utilizzando gli strumenti\n"
                + "che puoi trovare in giro.\n"
                + "\n"
                + "Il gioco racconta la storia tramite le descrizioni di alcuni oggetti, inoltre spesso\n"
                + "è necessario sfruttare tali descrizioni anche per poter procedere nel gioco, o per scoprire\n"
                + "ulteriori dettagli.\n"
                + "E qualunque cosa dovesse succedere:\n\n"
                + "Non dimenticare di fare la scelta che ritieni piu' giusta.", "Hive Mind", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_HelpMenu_HiveMindItemActionPerformed

    private void HelpMenu_CommandsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpMenu_CommandsItemActionPerformed
        JOptionPane.showMessageDialog(this, 
                
                  "\t\t--- Come giocare ad Hive Mind ---\n"
                + "\n"
                + "E' possibile usare questi comandi testuali anche senza premere i relativi pulsanti:\n"
                + "\n"
                + ">> nord - Spostati in direzione nord\n"
                + ">> est - Spostati in direzione est\n"
                + ">> ovest - Spostati in direzione ovest\n"
                + ">> sud - Spostati in direzione sud\n"
                + ">> osserva - permette di guardarti intorno ed esaminare l'ambiente circostante\n"
                + ">> carica - carica un salvataggio\n"
                + ">> salva - salva la partita corrente\n"
                + ">> help - stampa una lista dei comandi\n"
                + "\n"
                + "Altri comandi:\n"
                + "\n"
                + ">> esamina [qualcosa] - esamina qualcosa presente nella stanza, o prendi oggetti da un cadavere\n"
                + ">> inventario - visualizza l'inventario\n"
                + ">> equipaggia [oggetto] - equipaggia un oggetto dell'inventario (massimo 2 alla volta)\n"
                + ">> togli [oggetto] - disequipaggia un oggetto\n"
                + ">> apri [oggetto contenitore] - apri un oggetto specifico\n"
                + ">> chiudi [oggetto contenitore] - chiudi un oggetto specifico\n"
                + ">> lascia [oggetto] - lascia un oggetto in una stanza\n"
                + ">> metti [oggetto] in [oggetto contenitore] - metti un oggetto in un contenitore valido\n"
                + ">> prendi [oggetto] - prendi un oggetto a terra nella stanza o in un contenitore\n"
                + ">> parla a [personaggio] - parla ad un personaggio nella stanza\n"
                + ">> dai [oggetto] a [persona] - dai un oggetto nel tuo inventario ad un personaggio\n"
                + ">> usa [oggetto] -  usa oggetti esterni al tuo inventario\n"
                + "Altri comandi più specifici dovranno essere trovati dal giocatore.\n"
                + "\n"
                + "Per salvare o caricare una partita, sovrascrivere il file HiveMindGame.dat situato in\n"
                + "../hivemind/hivemind/HiveMindGame.dat", "Lista comandi", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_HelpMenu_CommandsItemActionPerformed

    private void FastTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FastTextActionPerformed
        fast = !fast;
    }//GEN-LAST:event_FastTextActionPerformed

    private void MusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MusicActionPerformed
        // TODO add your handling code here:
        music = !music;
        if (!music) {
            clip.stop();
        } else {
            startMusic();
        }
    }//GEN-LAST:event_MusicActionPerformed

    private void init() {
        game = new HiveMindGame(new CommandNames(), new ItemParameters(), new CharacterParameters());
        try {
            this.game.init();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Errore", JOptionPane.ERROR_MESSAGE);
        }

        GameCommandField.setEditable(true);
        NorthButton.setEnabled(true);
        SouthButton.setEnabled(true);
        EastButton.setEnabled(true);
        WestButton.setEnabled(true);
        LookButton.setEnabled(true);
        SaveButton.setEnabled(true);
        SaveMenuItem.setEnabled(true);

        GameTextArea.setText("");
        GameTextArea.append("////   " + game.getCurrentRoom().getName() + "   ////");
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
        GameTextArea.append("\n" + game.getCurrentRoom().getFirstDescription());
        GameTextArea.setCaretPosition(0);
        GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());

        game.getCurrentRoom().setVisited(true);

        CurrentRoomLabel.setText(game.getCurrentRoom().getName());
        updateInventory();
    }

    private void enableElements(boolean enable) {
        if (!game.isEnd()) {
            GameCommandField.setEditable(enable);
            NorthButton.setEnabled(enable);
            SouthButton.setEnabled(enable);
            EastButton.setEnabled(enable);
            WestButton.setEnabled(enable);
            LookButton.setEnabled(enable);
            SaveButton.setEnabled(enable);
            LoadButton.setEnabled(enable);
            SaveMenuItem.setEnabled(enable);
            NewMenuItem.setEnabled(enable);
            LoadMenuItem.setEnabled(enable);
            ExitMenuItem.setEnabled(enable);
        }
    }

    public boolean getMusicTrack() {
        return game.eventGoodEnding;
    }

    private void checkEnd() {
        if (game.isEnd()) {
            
            GameCommandField.setEditable(false);
            NorthButton.setEnabled(false);
            SouthButton.setEnabled(false);
            EastButton.setEnabled(false);
            WestButton.setEnabled(false);
            LookButton.setEnabled(false);
            SaveButton.setEnabled(false);
            SaveMenuItem.setEnabled(false);
            
            if (!this.getMusicTrack()) {
                playBadEndingMusic();
            } else {
                playGoodEndingMusic();
            }
            
        }
    }

    private void sendCommand() {
        if (GameCommandField.getText().length() > 0) {
            String command = GameCommandField.getText();
            ParserOutput p = parser.parse(command, game.getCommands(), game.getCurrentRoom().getItems(), game.getInventory(), game.getCurrentRoom().getNPCs());
            GameCommandField.setText("");

            tm.start();
            s = new StringBuilder("\n");

            if (p.getCommand() != null && p.getCommand().getType() == CommandType.END) {
                if (p.getItem1() != null || p.getInvItem1() != null || p.getCharacter1() != null || p.hasExtraWords()) {
                    GameTextArea.append("\nForse intendevi: esci");
                    GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
                } else {
                    GameTextArea.append("\nAddio!");
                    GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
                    System.exit(0);
                }

            } else if (p.getCommand() != null && p.getCommand().getType() == CommandType.SAVE) {
                if (p.getItem1() != null || p.getInvItem1() != null || p.getCharacter1() != null || p.hasExtraWords()) {
                    GameTextArea.append("\n\nForse intendevi: salva");
                    GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
                } else {
                    saveFile();
                    checkEnd();

                }

            } else if (p.getCommand() != null && p.getCommand().getType() == CommandType.LOAD) {
                if (p.getItem1() != null || p.getInvItem1() != null || p.getCharacter1() != null || p.hasExtraWords()) {
                    GameTextArea.append("\n\nForse intendevi: carica");
                    GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
                } else {
                    if (!saved) {
                        int option = JOptionPane.showConfirmDialog(null, "Ci sono modifiche non salvate. Sicuro di voler caricare una nuova partita?", "Caricamento file", JOptionPane.YES_NO_CANCEL_OPTION);
                        if (option == JOptionPane.YES_OPTION) {
                            loadFile();
                            saved = true;
                        } else if (option == JOptionPane.NO_OPTION) {
                            saveFile();
                        } else if (option == JOptionPane.CANCEL_OPTION) {
                            return;
                        }
                    } else {
                        loadFile();
                        saved = true;
                    }
                }

            } else {
                GameTextArea.append("\n>> " + command + "\n");
                GameTextArea.setCaretPosition(0);
                GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
                if (fast) {
                    GameTextArea.append(game.nextMove(p));
                } else {
                    s.append(game.nextMove(p));
                }
                GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());

                CurrentRoomLabel.setText(game.getCurrentRoom().getName());
                updateInventory();
                saved = false;

                checkEnd();
            }
        }
    }

    private void updateInventory() {
        InventoryTextArea.setText("");

        InventoryTextArea.append("Oggetti equipaggiati:\n");
        for (GameItem it : game.getInventory()) {
            if (it.isEquipped()) {
                InventoryTextArea.append("- " + it.getName());
                if (it.isOpen()) {
                    InventoryTextArea.append(" (aperto)");
                }
                InventoryTextArea.append("\n");
            }
        }

        InventoryTextArea.append("-----------------------------------------\n");

        InventoryTextArea.append("Oggetti nell'inventario:\n");
        for (GameItem it : game.getInventory()) {
            if (it.getContained() == -1 && !it.isEquipped() && !it.isNote()) {
                InventoryTextArea.append("- " + it.getName());
                if (it.isOpen()) {
                    InventoryTextArea.append(" (aperto)");
                }
                InventoryTextArea.append("\n");
            }
        }

        InventoryTextArea.append("-----------------------------------------\n");

        InventoryTextArea.append("Note raccolte:\n");
        for (GameItem it : game.getInventory()) {
            if (it.getContained() == -1 && !it.isEquipped() && it.isNote()) {
                InventoryTextArea.append("- " + it.getName());
                InventoryTextArea.append("\n");
            }
        }

    }

    private void loadFile() {
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));
                this.game = (HiveMindGame) in.readObject();
                in.close();

                GameTextArea.append("\n\nCaricamento partita completato.");
                GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
                CurrentRoomLabel.setText(game.getCurrentRoom().getName());
                updateInventory();

                GameCommandField.setEditable(true);
                NorthButton.setEnabled(true);
                SouthButton.setEnabled(true);
                EastButton.setEnabled(true);
                WestButton.setEnabled(true);
                LookButton.setEnabled(true);
                SaveButton.setEnabled(true);
                SaveMenuItem.setEnabled(true);

            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Il file selezionato e' incompatibile con questo gioco!", "Errore nel caricamento", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void saveFile() {
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file));
                out.writeObject(this.game);
                out.close();
                saved = true;

                GameTextArea.append("\n\nSalvataggio partita completato.");
                GameTextArea.setCaretPosition(GameTextArea.getDocument().getLength());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Errore nel salvataggio!", "Errore", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HiveMindGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HiveMindGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HiveMindGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HiveMindGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HiveMindGameFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AboutMenu;
    private javax.swing.JMenuItem AboutMenuItem;
    private javax.swing.JLabel CurrentRoomLabel;
    private javax.swing.JLabel CurrentRoomTitleLabel;
    private javax.swing.JButton EastButton;
    private javax.swing.JButton EnterButton;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JCheckBoxMenuItem FastText;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JTextField GameCommandField;
    private javax.swing.JTextArea GameTextArea;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuItem HelpMenu_CommandsItem;
    private javax.swing.JMenuItem HelpMenu_HiveMindItem;
    private javax.swing.JLabel InventoryLabel;
    private javax.swing.JTextArea InventoryTextArea;
    private javax.swing.JButton LoadButton;
    private javax.swing.JMenuItem LoadMenuItem;
    private javax.swing.JButton LookButton;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JCheckBoxMenuItem Music;
    private javax.swing.JMenuItem NewMenuItem;
    private javax.swing.JButton NorthButton;
    private javax.swing.JMenu Options;
    private javax.swing.JButton SaveButton;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JButton SouthButton;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JButton WestButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
